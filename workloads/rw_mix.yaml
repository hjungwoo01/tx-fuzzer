database:
  kind: postgres
  dsn: "postgres://postgres@/testdb?host=/tmp&sslmode=disable"

init_schema: false

workload:
  datatype: register

  transactions:
    # -------- HOT KEYS (high contention) --------
    - name: hot_rw_k1
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [1]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.005)"
          args: []
        - sql: "UPDATE kv SET v=v+1 WHERE k=$1"
          args: [1]
          elle: {f: ":write", key: "$1"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [1]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    - name: hot_rw_k2
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [2]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.005)"
          args: []
        - sql: "UPDATE kv SET v=v+1 WHERE k=$1"
          args: [2]
          elle: {f: ":write", key: "$1"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [2]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    - name: hot_rw_k3
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [3]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.005)"
          args: []
        - sql: "UPDATE kv SET v=v+1 WHERE k=$1"
          args: [3]
          elle: {f: ":write", key: "$1"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [3]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    # -------- COLD KEYS (lower contention) --------
    - name: cold_rw_k4
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [4]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.002)"
          args: []
        - sql: "UPDATE kv SET v=v+1 WHERE k=$1"
          args: [4]
          elle: {f: ":write", key: "$1"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [4]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    - name: cold_rw_k5
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [5]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.002)"
          args: []
        - sql: "UPDATE kv SET v=v+1 WHERE k=$1"
          args: [5]
          elle: {f: ":write", key: "$1"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [5]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    - name: cold_rw_k6
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [6]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.002)"
          args: []
        - sql: "UPDATE kv SET v=v+1 WHERE k=$1"
          args: [6]
          elle: {f: ":write", key: "$1"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [6]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    - name: cold_rw_k7
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [7]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.002)"
          args: []
        - sql: "UPDATE kv SET v=v+1 WHERE k=$1"
          args: [7]
          elle: {f: ":write", key: "$1"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [7]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    - name: cold_rw_k8
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [8]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.002)"
          args: []
        - sql: "UPDATE kv SET v=v+1 WHERE k=$1"
          args: [8]
          elle: {f: ":write", key: "$1"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [8]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    - name: cold_rw_k9
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [9]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.002)"
          args: []
        - sql: "UPDATE kv SET v=v+1 WHERE k=$1"
          args: [9]
          elle: {f: ":write", key: "$1"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [9]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    - name: cold_rw_k10
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [10]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.002)"
          args: []
        - sql: "UPDATE kv SET v=v+1 WHERE k=$1"
          args: [10]
          elle: {f: ":write", key: "$1"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [10]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    # -------- READ-ONLY PROBES (non-repeatable read checks) --------
    - name: ro_k1
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [1]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.01)"
          args: []
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [1]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    - name: ro_k2
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [2]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.01)"
          args: []
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [2]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    - name: ro_k3
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [3]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT pg_sleep(0.01)"
          args: []
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [3]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}

    # -------- TRANSFERS (write/write conflicts) --------
    - name: xfer_k1_k2
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "UPDATE kv SET v=v-1 WHERE k=$1"
          args: [1]
          elle: {f: ":write", key: "$1"}
        - sql: "UPDATE kv SET v=v+1 WHERE k=$2"
          args: [2]
          elle: {f: ":write", key: "$2"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [1]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT v FROM kv WHERE k=$2"
          args: [2]
          elle: {f: ":read", key: "$2", value_from_result_col: 0}

    - name: xfer_k2_k3
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "UPDATE kv SET v=v-1 WHERE k=$1"
          args: [2]
          elle: {f: ":write", key: "$1"}
        - sql: "UPDATE kv SET v=v+1 WHERE k=$2"
          args: [3]
          elle: {f: ":write", key: "$2"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [2]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT v FROM kv WHERE k=$2"
          args: [3]
          elle: {f: ":read", key: "$2", value_from_result_col: 0}

    - name: xfer_k3_k1
      isolation: "READ COMMITTED"
      timeout: "3s"
      steps:
        - sql: "UPDATE kv SET v=v-1 WHERE k=$1"
          args: [3]
          elle: {f: ":write", key: "$1"}
        - sql: "UPDATE kv SET v=v+1 WHERE k=$2"
          args: [1]
          elle: {f: ":write", key: "$2"}
        - sql: "SELECT v FROM kv WHERE k=$1"
          args: [3]
          elle: {f: ":read", key: "$1", value_from_result_col: 0}
        - sql: "SELECT v FROM kv WHERE k=$2"
          args: [1]
          elle: {f: ":read", key: "$2", value_from_result_col: 0}

  mix:
    # heavy hotspot traffic on k1..k3
    - txn: hot_rw_k1
      weight: 30
    - txn: hot_rw_k2
      weight: 30
    - txn: hot_rw_k3
      weight: 30

    # colder keys still get hit
    - txn: cold_rw_k4
      weight: 5
    - txn: cold_rw_k5
      weight: 5
    - txn: cold_rw_k6
      weight: 5
    - txn: cold_rw_k7
      weight: 5
    - txn: cold_rw_k8
      weight: 5
    - txn: cold_rw_k9
      weight: 5
    - txn: cold_rw_k10
      weight: 5

    # read-only probes
    - txn: ro_k1
      weight: 5
    - txn: ro_k2
      weight: 5
    - txn: ro_k3
      weight: 5

    # transfers to create conflicts
    - txn: xfer_k1_k2
      weight: 10
    - txn: xfer_k2_k3
      weight: 10
    - txn: xfer_k3_k1
      weight: 10

scheduling:
  duration: "30s"
  clients: 32
  barrier_every: 7
  random_kill_pct: 3
  jitter_ms_min: 0
  jitter_ms_max: 0